
//----------------------
// <auto-generated>
//     Generated REST API Client Code Generator v1.10.6.0 on 7/11/2024 11:00:11 AM
//     Using the tool Refitter v1.1.1
// </auto-generated>
//----------------------



using Refit;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace KinopoiskDesktop.Integrations.KinopoiskUnofficialApi
{
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.1.1.0")]
    public partial interface IKinopoiskClient
    {
        /// <summary>получить данные о фильме по kinopoisk id</summary>
        /// <remarks>Данный эндпоинт возвращает базовые данные о фильме. Поле <b>lastSync</b> показывает дату последнего обновления данных.</remarks>
        /// <param name="id">kinopoisk film id</param>
        /// <returns>Запрос выполнен успешно</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>\u041f\u0443\u0441\u0442\u043e\u0439 \u0438\u043b\u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d</description>
        /// </item>
        /// <item>
        /// <term>402</term>
        /// <description>\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432(\u0438\u043b\u0438 \u0434\u043d\u0435\u0432\u043d\u043e\u0439, \u0438\u043b\u0438 \u043e\u0431\u0449\u0438\u0439)</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>\u0424\u0438\u043b\u044c\u043c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d</description>
        /// </item>
        /// <item>
        /// <term>429</term>
        /// <description>\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041e\u0431\u0449\u0438\u0439 \u043b\u0438\u043c\u0438\u0442 - 20 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/v2.2/films/{id}")]
        Task<Film> Films(int id);

        /// <summary>получить данные о сезонах для сериала по kinopoisk film id</summary>
        /// <remarks>Данный эндпоинт возвращает данные о сезонах для сериала.</remarks>
        /// <param name="id">kinopoisk film id</param>
        /// <returns>Запрос выполнен успешно</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>\u041f\u0443\u0441\u0442\u043e\u0439 \u0438\u043b\u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d</description>
        /// </item>
        /// <item>
        /// <term>402</term>
        /// <description>\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432(\u0438\u043b\u0438 \u0434\u043d\u0435\u0432\u043d\u043e\u0439, \u0438\u043b\u0438 \u043e\u0431\u0449\u0438\u0439)</description>
        /// </item>
        /// <item>
        /// <term>429</term>
        /// <description>\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041e\u0431\u0449\u0438\u0439 \u043b\u0438\u043c\u0438\u0442 - 20 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/v2.2/films/{id}/seasons")]
        Task<SeasonResponse> Seasons(int id);

        /// <summary>получить данные о фактах и ошибках в фильме по kinopoisk film id</summary>
        /// <remarks>Данный эндпоинт возвращает список фактов и ошибок в фильме. <br> type - <b>FACT</b>, обозначает интересный факт о фильме. <br> type - <b>BLOOPER</b>, обозначает ошибку в фильме.</remarks>
        /// <param name="id">kinopoisk film id</param>
        /// <returns>Запрос выполнен успешно</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>\u041f\u0443\u0441\u0442\u043e\u0439 \u0438\u043b\u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d</description>
        /// </item>
        /// <item>
        /// <term>402</term>
        /// <description>\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432(\u0438\u043b\u0438 \u0434\u043d\u0435\u0432\u043d\u043e\u0439, \u0438\u043b\u0438 \u043e\u0431\u0449\u0438\u0439)</description>
        /// </item>
        /// <item>
        /// <term>429</term>
        /// <description>\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041e\u0431\u0449\u0438\u0439 \u043b\u0438\u043c\u0438\u0442 - 20 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/v2.2/films/{id}/facts")]
        Task<FactResponse> Facts(int id);

        /// <summary>получить данные о прокате фильма по kinopoisk film id</summary>
        /// <remarks>Данный эндпоинт возвращает данные о прокате в разных странах.</remarks>
        /// <param name="id">kinopoisk film id</param>
        /// <returns>Запрос выполнен успешно</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>\u041f\u0443\u0441\u0442\u043e\u0439 \u0438\u043b\u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d</description>
        /// </item>
        /// <item>
        /// <term>402</term>
        /// <description>\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432(\u0438\u043b\u0438 \u0434\u043d\u0435\u0432\u043d\u043e\u0439, \u0438\u043b\u0438 \u043e\u0431\u0449\u0438\u0439)</description>
        /// </item>
        /// <item>
        /// <term>429</term>
        /// <description>\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041e\u0431\u0449\u0438\u0439 \u043b\u0438\u043c\u0438\u0442 - 20 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/v2.2/films/{id}/distributions")]
        Task<DistributionResponse> Distributions(int id);

        /// <summary>получить данные о бюджете и сборах фильма по kinopoisk film id</summary>
        /// <remarks>Данный эндпоинт возвращает данные о бюджете и сборах.</remarks>
        /// <param name="id">kinopoisk film id</param>
        /// <returns>Запрос выполнен успешно</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>\u041f\u0443\u0441\u0442\u043e\u0439 \u0438\u043b\u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d</description>
        /// </item>
        /// <item>
        /// <term>402</term>
        /// <description>\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432(\u0438\u043b\u0438 \u0434\u043d\u0435\u0432\u043d\u043e\u0439, \u0438\u043b\u0438 \u043e\u0431\u0449\u0438\u0439)</description>
        /// </item>
        /// <item>
        /// <term>429</term>
        /// <description>\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041e\u0431\u0449\u0438\u0439 \u043b\u0438\u043c\u0438\u0442 - 20 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/v2.2/films/{id}/box_office")]
        Task<BoxOfficeResponse> Office(int id);

        /// <summary>получить данные о наградах фильма по kinopoisk film id</summary>
        /// <remarks>Данный эндпоинт возвращает данные о наградах и премиях фильма.</remarks>
        /// <param name="id">kinopoisk film id</param>
        /// <returns>Запрос выполнен успешно</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>\u041f\u0443\u0441\u0442\u043e\u0439 \u0438\u043b\u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d</description>
        /// </item>
        /// <item>
        /// <term>402</term>
        /// <description>\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432(\u0438\u043b\u0438 \u0434\u043d\u0435\u0432\u043d\u043e\u0439, \u0438\u043b\u0438 \u043e\u0431\u0449\u0438\u0439)</description>
        /// </item>
        /// <item>
        /// <term>429</term>
        /// <description>\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041e\u0431\u0449\u0438\u0439 \u043b\u0438\u043c\u0438\u0442 - 20 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/v2.2/films/{id}/awards")]
        Task<AwardResponse> Awards(int id);

        /// <summary>получить трейлеры,тизеры,видео для фильма по kinopoisk film id</summary>
        /// <remarks>Данный эндпоинт возвращает трейлеры,тизеры,видео для фильма по kinopoisk film id. В данный момент доступно три site:  <br/> <ul><li>YOUTUBE - в этом случае <b>url</b> это просто ссылка на youtube видео.</li><li>YANDEX_DISK - в этом случае <b>url</b> это ссылка на yandex disk.</li><li>KINOPOISK_WIDGET - в этом случае <b>url</b> это ссылка на кинопоиск виджет. Например https://widgets.kinopoisk.ru/discovery/trailer/123573?onlyPlayer=1&autoplay=1&cover=1. Если вы хотите вставить этот виджет на вашу страницу, вы можете сделать следующее:  <br/><br/>&lt;script src=&quot;https://unpkg.com/@ungap/custom-elements-builtin&quot;&gt;&lt;/script&gt;<br/>&lt;script type=&quot;module&quot; src=&quot;https://unpkg.com/x-frame-bypass&quot;&gt;&lt;/script&gt;<br/>&lt;iframe is=&quot;x-frame-bypass&quot; src=&quot;https://widgets.kinopoisk.ru/discovery/trailer/167560?onlyPlayer=1&amp;autoplay=1&amp;cover=1&quot; width=&quot;500&quot; height=&quot;500&quot;&gt;&lt;/iframe&gt;</li></ul></remarks>
        /// <param name="id">kinopoisk film id</param>
        /// <returns>Запрос выполнен успешно</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>\u041f\u0443\u0441\u0442\u043e\u0439 \u0438\u043b\u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d</description>
        /// </item>
        /// <item>
        /// <term>402</term>
        /// <description>\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432(\u0438\u043b\u0438 \u0434\u043d\u0435\u0432\u043d\u043e\u0439, \u0438\u043b\u0438 \u043e\u0431\u0449\u0438\u0439)</description>
        /// </item>
        /// <item>
        /// <term>429</term>
        /// <description>\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041e\u0431\u0449\u0438\u0439 \u043b\u0438\u043c\u0438\u0442 - 20 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/v2.2/films/{id}/videos")]
        Task<VideoResponse> Videos(int id);

        /// <summary>получить список похожих фильмов по kinopoisk film id</summary>
        /// <param name="id">kinopoisk film id</param>
        /// <returns>Запрос выполнен успешно</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>\u041f\u0443\u0441\u0442\u043e\u0439 \u0438\u043b\u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d</description>
        /// </item>
        /// <item>
        /// <term>402</term>
        /// <description>\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432(\u0438\u043b\u0438 \u0434\u043d\u0435\u0432\u043d\u043e\u0439, \u0438\u043b\u0438 \u043e\u0431\u0449\u0438\u0439)</description>
        /// </item>
        /// <item>
        /// <term>429</term>
        /// <description>\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041e\u0431\u0449\u0438\u0439 \u043b\u0438\u043c\u0438\u0442 - 20 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/v2.2/films/{id}/similars")]
        Task<RelatedFilmResponse> Similars(int id);

        /// <summary>получить изображения(кадры, постеры, фан-арты, обои и т.д.) связанные с фильмом по kinopoisk film id</summary>
        /// <remarks>Данный эндпоинт возвращает изображения связанные с фильмом с пагинацией. Каждая страница содержит <b>не более чем 20 фильмов</b>.</br> Доступные изображения:</br> <ul> <li>STILL - кадры</li> <li>SHOOTING - изображения со съемок</li> <li>POSTER - постеры</li> <li>FAN_ART - фан-арты</li> <li>PROMO - промо</li> <li>CONCEPT - концепт-арты</li> <li>WALLPAPER - обои</li> <li>COVER - обложки</li> <li>SCREENSHOT - скриншоты</li> </ul></remarks>
        /// <param name="id">kinopoisk film id</param>
        /// <param name="type">тип изображения</param>
        /// <param name="page">номер страницы</param>
        /// <returns>Запрос выполнен успешно</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>\u041f\u0443\u0441\u0442\u043e\u0439 \u0438\u043b\u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d</description>
        /// </item>
        /// <item>
        /// <term>402</term>
        /// <description>\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432(\u0438\u043b\u0438 \u0434\u043d\u0435\u0432\u043d\u043e\u0439, \u0438\u043b\u0438 \u043e\u0431\u0449\u0438\u0439)</description>
        /// </item>
        /// <item>
        /// <term>429</term>
        /// <description>\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041e\u0431\u0449\u0438\u0439 \u043b\u0438\u043c\u0438\u0442 - 20 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/v2.2/films/{id}/images")]
        Task<ImageResponse> Images(int id, [Query] Type? type, [Query] int? page);

        /// <summary>получить список рецензии зрителей по kinopoisk film id</summary>
        /// <remarks>Возвращает список рецензии зрителей с пагинацией. Каждая страница содержит не более чем 20 рецензий.</remarks>
        /// <param name="id">kinopoisk film id</param>
        /// <param name="page">номер страницы</param>
        /// <param name="order">тип сортировки</param>
        /// <returns>Запрос выполнен успешно</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>\u041f\u0443\u0441\u0442\u043e\u0439 \u0438\u043b\u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d</description>
        /// </item>
        /// <item>
        /// <term>402</term>
        /// <description>\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432(\u0438\u043b\u0438 \u0434\u043d\u0435\u0432\u043d\u043e\u0439, \u0438\u043b\u0438 \u043e\u0431\u0449\u0438\u0439)</description>
        /// </item>
        /// <item>
        /// <term>429</term>
        /// <description>\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041e\u0431\u0449\u0438\u0439 \u043b\u0438\u043c\u0438\u0442 - 20 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/v2.2/films/{id}/reviews")]
        Task<ReviewResponse> Reviews(int id, [Query] int? page, [Query] Order? order);

        /// <summary>получить список сайтов, где можно посмотреть фильм по kinopoisk film id</summary>
        /// <remarks>Возвращает список сайтов с пагинацией. Каждая страница содержит не более чем 20 рецензий.</remarks>
        /// <param name="id">kinopoisk film id</param>
        /// <param name="page">номер страницы</param>
        /// <returns>Запрос выполнен успешно</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>\u041f\u0443\u0441\u0442\u043e\u0439 \u0438\u043b\u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d</description>
        /// </item>
        /// <item>
        /// <term>402</term>
        /// <description>\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432(\u0438\u043b\u0438 \u0434\u043d\u0435\u0432\u043d\u043e\u0439, \u0438\u043b\u0438 \u043e\u0431\u0449\u0438\u0439)</description>
        /// </item>
        /// <item>
        /// <term>429</term>
        /// <description>\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041e\u0431\u0449\u0438\u0439 \u043b\u0438\u043c\u0438\u0442 - 20 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/v2.2/films/{id}/external_sources")]
        Task<ExternalSourceResponse> Sources(int id, [Query] int? page);

        /// <summary>получить список фильмов из различных топов или коллекций. Например https://www.kinopoisk.ru/top/lists/58/</summary>
        /// <remarks>Возвращает список фильмов с пагинацией. Каждая страница содержит не более чем 20 фильмов.</remarks>
        /// <param name="type">тип топа или коллекции</param>
        /// <param name="page">номер страницы</param>
        /// <returns>Запрос выполнен успешно</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>\u041f\u0443\u0441\u0442\u043e\u0439 \u0438\u043b\u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d</description>
        /// </item>
        /// <item>
        /// <term>402</term>
        /// <description>\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432(\u0438\u043b\u0438 \u0434\u043d\u0435\u0432\u043d\u043e\u0439, \u0438\u043b\u0438 \u043e\u0431\u0449\u0438\u0439)</description>
        /// </item>
        /// <item>
        /// <term>429</term>
        /// <description>\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041b\u0438\u043c\u0438\u0442 5 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/v2.2/films/collections")]
        Task<FilmCollectionResponse> Collections([Query] Type2? type, [Query] int? page);

        /// <summary>получить список кинопремьер</summary>
        /// <remarks>Данный эндпоинт возвращает список кинопремьер. Например https://www.kinopoisk.ru/premiere/</remarks>
        /// <param name="year">год релиза</param>
        /// <param name="month">месяц релиза</param>
        /// <returns>Запрос выполнен успешно</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>\u041f\u0443\u0441\u0442\u043e\u0439 \u0438\u043b\u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d</description>
        /// </item>
        /// <item>
        /// <term>402</term>
        /// <description>\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432(\u0438\u043b\u0438 \u0434\u043d\u0435\u0432\u043d\u043e\u0439, \u0438\u043b\u0438 \u043e\u0431\u0449\u0438\u0439)</description>
        /// </item>
        /// <item>
        /// <term>429</term>
        /// <description>\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041b\u0438\u043c\u0438\u0442 5 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/v2.2/films/premieres")]
        Task<PremiereResponse> Premieres([Query] int year, [Query] Month month);

        /// <summary>получить id стран и жанров для использования в /api/v2.2/films</summary>
        /// <remarks>Возвращает список id стран и жанров, которые могут быть использованы в /api/v2.2/films</remarks>
        /// <returns>Запрос выполнен успешно</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>\u041f\u0443\u0441\u0442\u043e\u0439 \u0438\u043b\u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d</description>
        /// </item>
        /// <item>
        /// <term>402</term>
        /// <description>\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432(\u0438\u043b\u0438 \u0434\u043d\u0435\u0432\u043d\u043e\u0439, \u0438\u043b\u0438 \u043e\u0431\u0449\u0438\u0439)</description>
        /// </item>
        /// <item>
        /// <term>429</term>
        /// <description>\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041e\u0431\u0449\u0438\u0439 \u043b\u0438\u043c\u0438\u0442 - 20 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/v2.2/films/filters")]
        Task<FiltersResponse> Filters();

        /// <summary>получить список фильмов по различным фильтрам</summary>
        /// <remarks>Возвращает список фильмов с пагинацией. Каждая страница содержит не более чем 20 фильмов. Данный эндпоинт не возращает более 400 фильмов. <i>Используй /api/v2.2/films/filters чтобы получить id стран и жанров.</i></remarks>
        /// <param name="countries">список id стран разделенные запятой. Например <i>countries=1,2,3</i>. На данный момент можно указать не более одной страны.</param>
        /// <param name="genres">список id жанров разделенные запятой. Например <i>genres=1,2,3</i>. На данный момент можно указать не более одного жанра.</param>
        /// <param name="order">сортировка</param>
        /// <param name="type">тип фильма</param>
        /// <param name="ratingFrom">минимальный рейтинг</param>
        /// <param name="ratingTo">максимальный рейтинг</param>
        /// <param name="yearFrom">минимальный год</param>
        /// <param name="yearTo">максимальный год</param>
        /// <param name="imdbId">imdb id</param>
        /// <param name="keyword">ключевое слово, которое встречается в названии фильма</param>
        /// <param name="page">номер страницы</param>
        /// <returns>Запрос выполнен успешно</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>\u041f\u0443\u0441\u0442\u043e\u0439 \u0438\u043b\u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d</description>
        /// </item>
        /// <item>
        /// <term>402</term>
        /// <description>\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432(\u0438\u043b\u0438 \u0434\u043d\u0435\u0432\u043d\u043e\u0439, \u0438\u043b\u0438 \u043e\u0431\u0449\u0438\u0439)</description>
        /// </item>
        /// <item>
        /// <term>429</term>
        /// <description>\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041b\u0438\u043c\u0438\u0442 5 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/v2.2/films")]
        Task<FilmSearchByFiltersResponse> Films2([Query(CollectionFormat.Multi)] IEnumerable<int> countries, [Query(CollectionFormat.Multi)] IEnumerable<int> genres, [Query] Order2? order, [Query] Type3? type, [Query] double? ratingFrom, [Query] double? ratingTo, [Query] int? yearFrom, [Query] int? yearTo, [Query] string imdbId, [Query] string keyword, [Query] int? page);

        /// <summary>получить сиквелы и приквелы для фильма по kinopoisk film id</summary>
        /// <remarks>tbd</remarks>
        /// <param name="id">kinopoisk film id</param>
        /// <returns>Запрос выполнен успешно</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>\u041f\u0443\u0441\u0442\u043e\u0439 \u0438\u043b\u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d</description>
        /// </item>
        /// <item>
        /// <term>402</term>
        /// <description>\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432(\u0438\u043b\u0438 \u0434\u043d\u0435\u0432\u043d\u043e\u0439, \u0438\u043b\u0438 \u043e\u0431\u0449\u0438\u0439)</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>\u0424\u0438\u043b\u044c\u043c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d</description>
        /// </item>
        /// <item>
        /// <term>429</term>
        /// <description>\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041e\u0431\u0449\u0438\u0439 \u043b\u0438\u043c\u0438\u0442 - 20 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/v2.1/films/{id}/sequels_and_prequels")]
        Task<ICollection<FilmSequelsAndPrequelsResponse>> Prequels(int id);

        /// <summary>получить список фильмов по ключевым словам</summary>
        /// <remarks>Возвращает список фильмов с пагинацией. Каждая страница содержит не более чем 20 фильмов.</remarks>
        /// <param name="keyword">ключивые слова для поиска</param>
        /// <param name="page">номер страницы</param>
        /// <returns>Запрос выполнен успешно</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>\u041f\u0443\u0441\u0442\u043e\u0439 \u0438\u043b\u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d</description>
        /// </item>
        /// <item>
        /// <term>402</term>
        /// <description>\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432(\u0438\u043b\u0438 \u0434\u043d\u0435\u0432\u043d\u043e\u0439, \u0438\u043b\u0438 \u043e\u0431\u0449\u0438\u0439)</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>\u0424\u0438\u043b\u044c\u043c\u044b \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u044b</description>
        /// </item>
        /// <item>
        /// <term>429</term>
        /// <description>\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041b\u0438\u043c\u0438\u0442 5 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/v2.1/films/search-by-keyword")]
        Task<FilmSearchResponse> SearchByKeyword([Query] string keyword, [Query] int? page);

        /// <summary>получить список цифровых релизов</summary>
        /// <remarks>Данный эндпоинт возвращает список цифровых релизов. Например https://www.kinopoisk.ru/comingsoon/digital/</remarks>
        /// <param name="year">год релиза</param>
        /// <param name="month">месяц релиза</param>
        /// <param name="page">номер страницы</param>
        /// <returns>Запрос выполнен успешно</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>\u041f\u0443\u0441\u0442\u043e\u0439 \u0438\u043b\u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d</description>
        /// </item>
        /// <item>
        /// <term>402</term>
        /// <description>\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432(\u0438\u043b\u0438 \u0434\u043d\u0435\u0432\u043d\u043e\u0439, \u0438\u043b\u0438 \u043e\u0431\u0449\u0438\u0439)</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>\u0424\u0438\u043b\u044c\u043c\u044b \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u044b</description>
        /// </item>
        /// <item>
        /// <term>429</term>
        /// <description>\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041b\u0438\u043c\u0438\u0442 5 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/v2.1/films/releases")]
        Task<DigitalReleaseResponse> Releases([Query] int year, [Query] Month2 month, [Query] int? page);

        /// <summary>получить данные об актерах, режисерах и т.д. по kinopoisk film id</summary>
        /// <param name="filmId">kinopoisk film id</param>
        /// <returns>Запрос выполнен успешно</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>\u041f\u0443\u0441\u0442\u043e\u0439 \u0438\u043b\u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d</description>
        /// </item>
        /// <item>
        /// <term>402</term>
        /// <description>\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432(\u0438\u043b\u0438 \u0434\u043d\u0435\u0432\u043d\u043e\u0439, \u0438\u043b\u0438 \u043e\u0431\u0449\u0438\u0439)</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>\u0414\u0430\u043d\u043d\u044b\u0435 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u044b</description>
        /// </item>
        /// <item>
        /// <term>429</term>
        /// <description>\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041e\u0431\u0449\u0438\u0439 \u043b\u0438\u043c\u0438\u0442 - 20 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/v1/staff")]
        Task<ICollection<StaffResponse>> StaffAll([Query] int filmId);

        /// <summary>получить данные о конкретном человеке по kinopoisk person id</summary>
        /// <param name="id">kinopoisk person id</param>
        /// <returns>Запрос выполнен успешно</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>\u041f\u0443\u0441\u0442\u043e\u0439 \u0438\u043b\u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d</description>
        /// </item>
        /// <item>
        /// <term>402</term>
        /// <description>\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432(\u0438\u043b\u0438 \u0434\u043d\u0435\u0432\u043d\u043e\u0439, \u0438\u043b\u0438 \u043e\u0431\u0449\u0438\u0439)</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>\u0414\u0430\u043d\u043d\u044b\u0435 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u044b</description>
        /// </item>
        /// <item>
        /// <term>429</term>
        /// <description>\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041e\u0431\u0449\u0438\u0439 \u043b\u0438\u043c\u0438\u0442 - 20 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/v1/staff/{id}")]
        Task<PersonResponse> Staff(int id);

        /// <summary>поиск актеров, режиссеров и т.д. по имени</summary>
        /// <remarks>Одна страница может содержать до 50 элементов в items.</remarks>
        /// <param name="name">имя человека</param>
        /// <param name="page">номер страницы</param>
        /// <returns>Запрос выполнен успешно</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>\u041f\u0443\u0441\u0442\u043e\u0439 \u0438\u043b\u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d</description>
        /// </item>
        /// <item>
        /// <term>402</term>
        /// <description>\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432(\u0438\u043b\u0438 \u0434\u043d\u0435\u0432\u043d\u043e\u0439, \u0438\u043b\u0438 \u043e\u0431\u0449\u0438\u0439)</description>
        /// </item>
        /// <item>
        /// <term>429</term>
        /// <description>\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041e\u0431\u0449\u0438\u0439 \u043b\u0438\u043c\u0438\u0442 - 5 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/v1/persons")]
        Task<PersonByNameResponse> Persons([Query] string name, [Query] int? page);

        /// <summary>получить данные об оценках пользователя</summary>
        /// <remarks>Одна страница может содержать до 20 элементов в items. Доступны не все оценки пользователя, а примерно 1500 последних</remarks>
        /// <param name="id">id пользователя на сайте кинопоиск</param>
        /// <param name="page">номер страницы</param>
        /// <returns>Запрос выполнен успешно</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>\u041f\u0443\u0441\u0442\u043e\u0439 \u0438\u043b\u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d</description>
        /// </item>
        /// <item>
        /// <term>402</term>
        /// <description>\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432(\u0438\u043b\u0438 \u0434\u043d\u0435\u0432\u043d\u043e\u0439, \u0438\u043b\u0438 \u043e\u0431\u0449\u0438\u0439)</description>
        /// </item>
        /// <item>
        /// <term>429</term>
        /// <description>\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041e\u0431\u0449\u0438\u0439 \u043b\u0438\u043c\u0438\u0442 - 2 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/v1/kp_users/{id}/votes")]
        Task<KinopoiskUserVoteResponse> Votes(int id, [Query] int? page);

        /// <summary>получить данные об api key</summary>
        /// <param name="apiKey">api key</param>
        /// <returns>Запрос выполнен успешно</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>429</term>
        /// <description>\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041e\u0431\u0449\u0438\u0439 \u043b\u0438\u043c\u0438\u0442 - 2 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/v1/api_keys/{apiKey}")]
        Task<ApiKeyResponse> Keys(string apiKey);

        /// <summary>получить медиа новости с сайта кинопоиск</summary>
        /// <remarks>Одна страница может содержать до 20 элементов в items.</remarks>
        /// <param name="page">номер страницы</param>
        /// <returns>Запрос выполнен успешно</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>429</term>
        /// <description>\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u041e\u0431\u0449\u0438\u0439 \u043b\u0438\u043c\u0438\u0442 - 20 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/v1/media_posts")]
        Task<MediaPostsResponse> Posts([Query] int? page);


    }
}


//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable CS8765 // Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes).

namespace KinopoiskDesktop.Integrations.KinopoiskUnofficialApi
{
    using System = global::System;

    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Film
    {

        [JsonPropertyName("kinopoiskId")]
        public int KinopoiskId { get; set; }

        [JsonPropertyName("kinopoiskHDId")]
        public string KinopoiskHDId { get; set; }

        [JsonPropertyName("imdbId")]
        public string ImdbId { get; set; }

        [JsonPropertyName("nameRu")]
        public string NameRu { get; set; }

        [JsonPropertyName("nameEn")]
        public string NameEn { get; set; }

        [JsonPropertyName("nameOriginal")]
        public string NameOriginal { get; set; }

        [JsonPropertyName("posterUrl")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PosterUrl { get; set; }

        [JsonPropertyName("posterUrlPreview")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PosterUrlPreview { get; set; }

        [JsonPropertyName("coverUrl")]
        public string CoverUrl { get; set; }

        [JsonPropertyName("logoUrl")]
        public string LogoUrl { get; set; }

        [JsonPropertyName("reviewsCount")]
        public int ReviewsCount { get; set; }

        [JsonPropertyName("ratingGoodReview")]
        public double? RatingGoodReview { get; set; }

        [JsonPropertyName("ratingGoodReviewVoteCount")]
        public int? RatingGoodReviewVoteCount { get; set; }

        [JsonPropertyName("ratingKinopoisk")]
        public double? RatingKinopoisk { get; set; }

        [JsonPropertyName("ratingKinopoiskVoteCount")]
        public int? RatingKinopoiskVoteCount { get; set; }

        [JsonPropertyName("ratingImdb")]
        public double? RatingImdb { get; set; }

        [JsonPropertyName("ratingImdbVoteCount")]
        public int? RatingImdbVoteCount { get; set; }

        [JsonPropertyName("ratingFilmCritics")]
        public double? RatingFilmCritics { get; set; }

        [JsonPropertyName("ratingFilmCriticsVoteCount")]
        public int? RatingFilmCriticsVoteCount { get; set; }

        [JsonPropertyName("ratingAwait")]
        public double? RatingAwait { get; set; }

        [JsonPropertyName("ratingAwaitCount")]
        public int? RatingAwaitCount { get; set; }

        [JsonPropertyName("ratingRfCritics")]
        public double? RatingRfCritics { get; set; }

        [JsonPropertyName("ratingRfCriticsVoteCount")]
        public int? RatingRfCriticsVoteCount { get; set; }

        [JsonPropertyName("webUrl")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WebUrl { get; set; }

        [JsonPropertyName("year")]
        public int? Year { get; set; }

        [JsonPropertyName("filmLength")]
        public int? FilmLength { get; set; }

        [JsonPropertyName("slogan")]
        public string Slogan { get; set; }

        [JsonPropertyName("description")]
        public string Description { get; set; }

        [JsonPropertyName("shortDescription")]
        public string ShortDescription { get; set; }

        [JsonPropertyName("editorAnnotation")]
        public string EditorAnnotation { get; set; }

        [JsonPropertyName("isTicketsAvailable")]
        public bool IsTicketsAvailable { get; set; }

        [JsonPropertyName("productionStatus")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public FilmProductionStatus? ProductionStatus { get; set; }

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public FilmType Type { get; set; }

        [JsonPropertyName("ratingMpaa")]
        public string RatingMpaa { get; set; }

        [JsonPropertyName("ratingAgeLimits")]
        public string RatingAgeLimits { get; set; }

        [JsonPropertyName("hasImax")]
        public bool? HasImax { get; set; }

        [JsonPropertyName("has3D")]
        public bool? Has3D { get; set; }

        [JsonPropertyName("lastSync")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastSync { get; set; }

        [JsonPropertyName("countries")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Country> Countries { get; set; } = new System.Collections.ObjectModel.Collection<Country>();

        [JsonPropertyName("genres")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Genre> Genres { get; set; } = new System.Collections.ObjectModel.Collection<Genre>();

        [JsonPropertyName("startYear")]
        public int? StartYear { get; set; }

        [JsonPropertyName("endYear")]
        public int? EndYear { get; set; }

        [JsonPropertyName("serial")]
        public bool? Serial { get; set; }

        [JsonPropertyName("shortFilm")]
        public bool? ShortFilm { get; set; }

        [JsonPropertyName("completed")]
        public bool? Completed { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class SeasonResponse
    {

        [JsonPropertyName("total")]
        public int Total { get; set; }

        [JsonPropertyName("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Season> Items { get; set; } = new System.Collections.ObjectModel.Collection<Season>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class FactResponse
    {

        [JsonPropertyName("total")]
        public int Total { get; set; }

        [JsonPropertyName("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Fact> Items { get; set; } = new System.Collections.ObjectModel.Collection<Fact>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class DistributionResponse
    {

        [JsonPropertyName("total")]
        public int Total { get; set; }

        [JsonPropertyName("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Distribution> Items { get; set; } = new System.Collections.ObjectModel.Collection<Distribution>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class BoxOfficeResponse
    {

        [JsonPropertyName("total")]
        public int Total { get; set; }

        [JsonPropertyName("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<BoxOffice> Items { get; set; } = new System.Collections.ObjectModel.Collection<BoxOffice>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Fact
    {

        [JsonPropertyName("text")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Text { get; set; }

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public FactType Type { get; set; }

        [JsonPropertyName("spoiler")]
        public bool Spoiler { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class BoxOffice
    {

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [JsonPropertyName("amount")]
        public int Amount { get; set; }

        [JsonPropertyName("currencyCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CurrencyCode { get; set; }

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [JsonPropertyName("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class AwardResponse
    {

        [JsonPropertyName("total")]
        public int Total { get; set; }

        [JsonPropertyName("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Award> Items { get; set; } = new System.Collections.ObjectModel.Collection<Award>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Award
    {

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [JsonPropertyName("win")]
        public bool Win { get; set; }

        [JsonPropertyName("imageUrl")]
        public string ImageUrl { get; set; }

        [JsonPropertyName("nominationName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NominationName { get; set; }

        [JsonPropertyName("year")]
        public int Year { get; set; }

        [JsonPropertyName("persons")]
        public ICollection<AwardPerson> Persons { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class AwardPerson
    {

        [JsonPropertyName("kinopoiskId")]
        public int KinopoiskId { get; set; }

        [JsonPropertyName("webUrl")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WebUrl { get; set; }

        [JsonPropertyName("nameRu")]
        public string NameRu { get; set; }

        [JsonPropertyName("nameEn")]
        public string NameEn { get; set; }

        [JsonPropertyName("sex")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Sex { get; set; }

        [JsonPropertyName("posterUrl")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PosterUrl { get; set; }

        [JsonPropertyName("growth")]
        public int? Growth { get; set; }

        [JsonPropertyName("birthday")]
        public string Birthday { get; set; }

        [JsonPropertyName("death")]
        public string Death { get; set; }

        [JsonPropertyName("age")]
        public int? Age { get; set; }

        [JsonPropertyName("birthplace")]
        public string Birthplace { get; set; }

        [JsonPropertyName("deathplace")]
        public string Deathplace { get; set; }

        [JsonPropertyName("profession")]
        public string Profession { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Distribution
    {

        [JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public DistributionType Type { get; set; }

        [JsonPropertyName("subType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public DistributionSubType? SubType { get; set; }

        [JsonPropertyName("date")]
        public string Date { get; set; }

        [JsonPropertyName("reRelease")]
        public bool? ReRelease { get; set; }

        [JsonPropertyName("country")]
        public Country2 Country { get; set; }

        [JsonPropertyName("companies")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Company> Companies { get; set; } = new System.Collections.ObjectModel.Collection<Company>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Company
    {

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Season
    {

        [JsonPropertyName("number")]
        public int Number { get; set; }

        [JsonPropertyName("episodes")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Episode> Episodes { get; set; } = new System.Collections.ObjectModel.Collection<Episode>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Episode
    {

        [JsonPropertyName("seasonNumber")]
        public int SeasonNumber { get; set; }

        [JsonPropertyName("episodeNumber")]
        public int EpisodeNumber { get; set; }

        [JsonPropertyName("nameRu")]
        public string NameRu { get; set; }

        [JsonPropertyName("nameEn")]
        public string NameEn { get; set; }

        [JsonPropertyName("synopsis")]
        public string Synopsis { get; set; }

        [JsonPropertyName("releaseDate")]
        public string ReleaseDate { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Country
    {

        [JsonPropertyName("country")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country1 { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Genre
    {

        [JsonPropertyName("genre")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Genre1 { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class FiltersResponse
    {

        [JsonPropertyName("genres")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<FiltersResponse_genres> Genres { get; set; } = new System.Collections.ObjectModel.Collection<FiltersResponse_genres>();

        [JsonPropertyName("countries")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<FiltersResponse_countries> Countries { get; set; } = new System.Collections.ObjectModel.Collection<FiltersResponse_countries>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class FilmSearchResponse
    {

        [JsonPropertyName("keyword")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Keyword { get; set; }

        [JsonPropertyName("pagesCount")]
        public int PagesCount { get; set; }

        [JsonPropertyName("searchFilmsCountResult")]
        public int SearchFilmsCountResult { get; set; }

        [JsonPropertyName("films")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<FilmSearchResponse_films> Films { get; set; } = new System.Collections.ObjectModel.Collection<FilmSearchResponse_films>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class FilmSearchByFiltersResponse
    {

        [JsonPropertyName("total")]
        public int Total { get; set; }

        [JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        [JsonPropertyName("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<FilmSearchByFiltersResponse_items> Items { get; set; } = new System.Collections.ObjectModel.Collection<FilmSearchByFiltersResponse_items>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class FilmSequelsAndPrequelsResponse
    {

        [JsonPropertyName("filmId")]
        public int FilmId { get; set; }

        [JsonPropertyName("nameRu")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NameRu { get; set; }

        [JsonPropertyName("nameEn")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NameEn { get; set; }

        [JsonPropertyName("nameOriginal")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NameOriginal { get; set; }

        [JsonPropertyName("posterUrl")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PosterUrl { get; set; }

        [JsonPropertyName("posterUrlPreview")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PosterUrlPreview { get; set; }

        [JsonPropertyName("relationType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public FilmSequelsAndPrequelsResponseRelationType RelationType { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class RelatedFilmResponse
    {

        [JsonPropertyName("total")]
        public int Total { get; set; }

        [JsonPropertyName("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<RelatedFilmResponse_items> Items { get; set; } = new System.Collections.ObjectModel.Collection<RelatedFilmResponse_items>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ReviewResponse
    {
        /// <summary>
        /// Суммарное кол-во пользовательских рецензий
        /// </summary>

        [JsonPropertyName("total")]
        public int Total { get; set; }

        [JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        [JsonPropertyName("totalPositiveReviews")]
        public int TotalPositiveReviews { get; set; }

        [JsonPropertyName("totalNegativeReviews")]
        public int TotalNegativeReviews { get; set; }

        [JsonPropertyName("totalNeutralReviews")]
        public int TotalNeutralReviews { get; set; }

        [JsonPropertyName("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<ReviewResponse_items> Items { get; set; } = new System.Collections.ObjectModel.Collection<ReviewResponse_items>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ExternalSourceResponse
    {
        /// <summary>
        /// Суммарное кол-во сайтов
        /// </summary>

        [JsonPropertyName("total")]
        public int Total { get; set; }

        [JsonPropertyName("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<ExternalSourceResponse_items> Items { get; set; } = new System.Collections.ObjectModel.Collection<ExternalSourceResponse_items>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class FilmCollectionResponse
    {

        [JsonPropertyName("total")]
        public int Total { get; set; }

        [JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        [JsonPropertyName("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<FilmCollectionResponse_items> Items { get; set; } = new System.Collections.ObjectModel.Collection<FilmCollectionResponse_items>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class StaffResponse
    {

        [JsonPropertyName("staffId")]
        public int StaffId { get; set; }

        [JsonPropertyName("nameRu")]
        public string NameRu { get; set; }

        [JsonPropertyName("nameEn")]
        public string NameEn { get; set; }

        [JsonPropertyName("description")]
        public string Description { get; set; }

        [JsonPropertyName("posterUrl")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PosterUrl { get; set; }

        [JsonPropertyName("professionText")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProfessionText { get; set; }

        [JsonPropertyName("professionKey")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public StaffResponseProfessionKey ProfessionKey { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class PersonResponse
    {

        [JsonPropertyName("personId")]
        public int PersonId { get; set; }

        [JsonPropertyName("webUrl")]
        public string WebUrl { get; set; }

        [JsonPropertyName("nameRu")]
        public string NameRu { get; set; }

        [JsonPropertyName("nameEn")]
        public string NameEn { get; set; }

        [JsonPropertyName("sex")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PersonResponseSex? Sex { get; set; }

        [JsonPropertyName("posterUrl")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PosterUrl { get; set; }

        [JsonPropertyName("growth")]
        public string Growth { get; set; }

        [JsonPropertyName("birthday")]
        public string Birthday { get; set; }

        [JsonPropertyName("death")]
        public string Death { get; set; }

        [JsonPropertyName("age")]
        public int? Age { get; set; }

        [JsonPropertyName("birthplace")]
        public string Birthplace { get; set; }

        [JsonPropertyName("deathplace")]
        public string Deathplace { get; set; }

        [JsonPropertyName("hasAwards")]
        public int? HasAwards { get; set; }

        [JsonPropertyName("profession")]
        public string Profession { get; set; }

        [JsonPropertyName("facts")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<string> Facts { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [JsonPropertyName("spouses")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<PersonResponse_spouses> Spouses { get; set; } = new System.Collections.ObjectModel.Collection<PersonResponse_spouses>();

        [JsonPropertyName("films")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<PersonResponse_films> Films { get; set; } = new System.Collections.ObjectModel.Collection<PersonResponse_films>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class PersonByNameResponse
    {

        [JsonPropertyName("total")]
        public int Total { get; set; }

        [JsonPropertyName("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<PersonByNameResponse_items> Items { get; set; } = new System.Collections.ObjectModel.Collection<PersonByNameResponse_items>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ImageResponse
    {
        /// <summary>
        /// Общее кол-во изображений
        /// </summary>

        [JsonPropertyName("total")]
        public int Total { get; set; }

        /// <summary>
        /// Код-во доступных страниц
        /// </summary>

        [JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        [JsonPropertyName("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<ImageResponse_items> Items { get; set; } = new System.Collections.ObjectModel.Collection<ImageResponse_items>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class PremiereResponse
    {

        [JsonPropertyName("total")]
        public int Total { get; set; }

        [JsonPropertyName("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<PremiereResponseItem> Items { get; set; } = new System.Collections.ObjectModel.Collection<PremiereResponseItem>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class PremiereResponseItem
    {

        [JsonPropertyName("kinopoiskId")]
        public int KinopoiskId { get; set; }

        [JsonPropertyName("nameRu")]
        public string NameRu { get; set; }

        [JsonPropertyName("nameEn")]
        public string NameEn { get; set; }

        [JsonPropertyName("year")]
        public int Year { get; set; }

        [JsonPropertyName("posterUrl")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PosterUrl { get; set; }

        [JsonPropertyName("posterUrlPreview")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PosterUrlPreview { get; set; }

        [JsonPropertyName("countries")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Country> Countries { get; set; } = new System.Collections.ObjectModel.Collection<Country>();

        [JsonPropertyName("genres")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Genre> Genres { get; set; } = new System.Collections.ObjectModel.Collection<Genre>();

        [JsonPropertyName("duration")]
        public int? Duration { get; set; }

        [JsonPropertyName("premiereRu")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PremiereRu { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class DigitalReleaseResponse
    {

        [JsonPropertyName("page")]
        public int Page { get; set; }

        [JsonPropertyName("total")]
        public int Total { get; set; }

        [JsonPropertyName("releases")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<DigitalReleaseItem> Releases { get; set; } = new System.Collections.ObjectModel.Collection<DigitalReleaseItem>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class DigitalReleaseItem
    {

        [JsonPropertyName("filmId")]
        public int FilmId { get; set; }

        [JsonPropertyName("nameRu")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NameRu { get; set; }

        [JsonPropertyName("nameEn")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NameEn { get; set; }

        [JsonPropertyName("year")]
        public int Year { get; set; }

        [JsonPropertyName("posterUrl")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PosterUrl { get; set; }

        [JsonPropertyName("posterUrlPreview")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PosterUrlPreview { get; set; }

        [JsonPropertyName("countries")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Country> Countries { get; set; } = new System.Collections.ObjectModel.Collection<Country>();

        [JsonPropertyName("genres")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<Genre> Genres { get; set; } = new System.Collections.ObjectModel.Collection<Genre>();

        [JsonPropertyName("rating")]
        public double Rating { get; set; }

        [JsonPropertyName("ratingVoteCount")]
        public int RatingVoteCount { get; set; }

        [JsonPropertyName("expectationsRating")]
        public double ExpectationsRating { get; set; }

        [JsonPropertyName("expectationsRatingVoteCount")]
        public int ExpectationsRatingVoteCount { get; set; }

        [JsonPropertyName("duration")]
        public int Duration { get; set; }

        [JsonPropertyName("releaseDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReleaseDate { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class VideoResponse
    {

        [JsonPropertyName("total")]
        public int Total { get; set; }

        [JsonPropertyName("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<VideoResponse_items> Items { get; set; } = new System.Collections.ObjectModel.Collection<VideoResponse_items>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class KinopoiskUserVoteResponse
    {

        [JsonPropertyName("total")]
        public int Total { get; set; }

        [JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        [JsonPropertyName("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<KinopoiskUserVoteResponse_items> Items { get; set; } = new System.Collections.ObjectModel.Collection<KinopoiskUserVoteResponse_items>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ApiKeyResponse
    {

        [JsonPropertyName("totalQuota")]
        [System.ComponentModel.DataAnnotations.Required]
        public ApiKeyResponse_totalQuota TotalQuota { get; set; } = new ApiKeyResponse_totalQuota();

        [JsonPropertyName("dailyQuota")]
        [System.ComponentModel.DataAnnotations.Required]
        public ApiKeyResponse_dailyQuota DailyQuota { get; set; } = new ApiKeyResponse_dailyQuota();

        [JsonPropertyName("accountType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ApiKeyResponseAccountType AccountType { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class MediaPostsResponse
    {

        [JsonPropertyName("total")]
        public int Total { get; set; }

        [JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }

        [JsonPropertyName("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public ICollection<MediaPostsResponse_items> Items { get; set; } = new System.Collections.ObjectModel.Collection<MediaPostsResponse_items>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ApiError
    {

        [JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class FiltersResponse_genres
    {

        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("genre")]
        public string Genre { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class FiltersResponse_countries
    {

        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("country")]
        public string Country { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class FilmSearchResponse_films
    {

        [JsonPropertyName("filmId")]
        public int FilmId { get; set; }

        [JsonPropertyName("nameRu")]
        public string NameRu { get; set; }

        [JsonPropertyName("nameEn")]
        public string NameEn { get; set; }

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public FilmSearchResponse_filmsType Type { get; set; }

        [JsonPropertyName("year")]
        public string Year { get; set; }

        [JsonPropertyName("description")]
        public string Description { get; set; }

        [JsonPropertyName("filmLength")]
        public string FilmLength { get; set; }

        [JsonPropertyName("countries")]
        public ICollection<Country> Countries { get; set; }

        [JsonPropertyName("genres")]
        public ICollection<Genre> Genres { get; set; }

        [JsonPropertyName("rating")]
        public string Rating { get; set; }

        [JsonPropertyName("ratingVoteCount")]
        public int RatingVoteCount { get; set; }

        [JsonPropertyName("posterUrl")]
        public string PosterUrl { get; set; }

        [JsonPropertyName("posterUrlPreview")]
        public string PosterUrlPreview { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class FilmSearchByFiltersResponse_items
    {

        [JsonPropertyName("kinopoiskId")]
        public int KinopoiskId { get; set; }

        [JsonPropertyName("imdbId")]
        public string ImdbId { get; set; }

        [JsonPropertyName("nameRu")]
        public string NameRu { get; set; }

        [JsonPropertyName("nameEn")]
        public string NameEn { get; set; }

        [JsonPropertyName("nameOriginal")]
        public string NameOriginal { get; set; }

        [JsonPropertyName("countries")]
        public ICollection<Country> Countries { get; set; }

        [JsonPropertyName("genres")]
        public ICollection<Genre> Genres { get; set; }

        [JsonPropertyName("ratingKinopoisk")]
        public double? RatingKinopoisk { get; set; }

        [JsonPropertyName("ratingImdb")]
        public double? RatingImdb { get; set; }

        [JsonPropertyName("year")]
        public double? Year { get; set; }

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public FilmSearchByFiltersResponse_itemsType Type { get; set; }

        [JsonPropertyName("posterUrl")]
        public string PosterUrl { get; set; }

        [JsonPropertyName("posterUrlPreview")]
        public string PosterUrlPreview { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class RelatedFilmResponse_items
    {

        [JsonPropertyName("filmId")]
        public int FilmId { get; set; }

        [JsonPropertyName("nameRu")]
        public string NameRu { get; set; }

        [JsonPropertyName("nameEn")]
        public string NameEn { get; set; }

        [JsonPropertyName("nameOriginal")]
        public string NameOriginal { get; set; }

        [JsonPropertyName("posterUrl")]
        public string PosterUrl { get; set; }

        [JsonPropertyName("posterUrlPreview")]
        public string PosterUrlPreview { get; set; }

        [JsonPropertyName("relationType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public RelatedFilmResponse_itemsRelationType RelationType { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ReviewResponse_items
    {

        [JsonPropertyName("kinopoiskId")]
        public int KinopoiskId { get; set; }

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ReviewResponse_itemsType Type { get; set; }

        [JsonPropertyName("date")]
        public string Date { get; set; }

        [JsonPropertyName("positiveRating")]
        public int PositiveRating { get; set; }

        [JsonPropertyName("negativeRating")]
        public int NegativeRating { get; set; }

        [JsonPropertyName("author")]
        public string Author { get; set; }

        [JsonPropertyName("title")]
        public string Title { get; set; }

        [JsonPropertyName("description")]
        public string Description { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ExternalSourceResponse_items
    {

        [JsonPropertyName("url")]
        public string Url { get; set; }

        [JsonPropertyName("platform")]
        public string Platform { get; set; }

        [JsonPropertyName("logoUrl")]
        public string LogoUrl { get; set; }

        [JsonPropertyName("positiveRating")]
        public int PositiveRating { get; set; }

        [JsonPropertyName("negativeRating")]
        public int NegativeRating { get; set; }

        [JsonPropertyName("author")]
        public string Author { get; set; }

        [JsonPropertyName("title")]
        public string Title { get; set; }

        [JsonPropertyName("description")]
        public string Description { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class FilmCollectionResponse_items
    {

        [JsonPropertyName("kinopoiskId")]
        public int KinopoiskId { get; set; }

        [JsonPropertyName("nameRu")]
        public string NameRu { get; set; }

        [JsonPropertyName("nameEn")]
        public string NameEn { get; set; }

        [JsonPropertyName("nameOriginal")]
        public string NameOriginal { get; set; }

        [JsonPropertyName("countries")]
        public ICollection<Country> Countries { get; set; }

        [JsonPropertyName("genres")]
        public ICollection<Genre> Genres { get; set; }

        [JsonPropertyName("ratingKinopoisk")]
        public double? RatingKinopoisk { get; set; }

        [JsonPropertyName("ratingImbd")]
        public double? RatingImbd { get; set; }

        [JsonPropertyName("year")]
        public string Year { get; set; }

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public FilmCollectionResponse_itemsType Type { get; set; }

        [JsonPropertyName("posterUrl")]
        public string PosterUrl { get; set; }

        [JsonPropertyName("posterUrlPreview")]
        public string PosterUrlPreview { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class PersonResponse_spouses
    {

        [JsonPropertyName("personId")]
        public int PersonId { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("divorced")]
        public bool Divorced { get; set; }

        [JsonPropertyName("divorcedReason")]
        public string DivorcedReason { get; set; }

        [JsonPropertyName("sex")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PersonResponse_spousesSex Sex { get; set; }

        [JsonPropertyName("children")]
        public int Children { get; set; }

        [JsonPropertyName("webUrl")]
        public string WebUrl { get; set; }

        [JsonPropertyName("relation")]
        public string Relation { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class PersonResponse_films
    {

        [JsonPropertyName("filmId")]
        public int FilmId { get; set; }

        [JsonPropertyName("nameRu")]
        public string NameRu { get; set; }

        [JsonPropertyName("nameEn")]
        public string NameEn { get; set; }

        [JsonPropertyName("rating")]
        public string Rating { get; set; }

        [JsonPropertyName("general")]
        public bool General { get; set; }

        [JsonPropertyName("description")]
        public string Description { get; set; }

        [JsonPropertyName("professionKey")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PersonResponse_filmsProfessionKey ProfessionKey { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class PersonByNameResponse_items
    {

        [JsonPropertyName("kinopoiskId")]
        public int KinopoiskId { get; set; }

        [JsonPropertyName("webUrl")]
        public string WebUrl { get; set; }

        [JsonPropertyName("nameRu")]
        public string NameRu { get; set; }

        [JsonPropertyName("nameEn")]
        public string NameEn { get; set; }

        [JsonPropertyName("sex")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PersonByNameResponse_itemsSex? Sex { get; set; }

        [JsonPropertyName("posterUrl")]
        public string PosterUrl { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ImageResponse_items
    {

        [JsonPropertyName("imageUrl")]
        public string ImageUrl { get; set; }

        [JsonPropertyName("previewUrl")]
        public string PreviewUrl { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class VideoResponse_items
    {

        [JsonPropertyName("url")]
        public string Url { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("site")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public VideoResponse_itemsSite Site { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class KinopoiskUserVoteResponse_items
    {

        [JsonPropertyName("kinopoiskId")]
        public int KinopoiskId { get; set; }

        [JsonPropertyName("nameRu")]
        public string NameRu { get; set; }

        [JsonPropertyName("nameEn")]
        public string NameEn { get; set; }

        [JsonPropertyName("nameOriginal")]
        public string NameOriginal { get; set; }

        [JsonPropertyName("countries")]
        public ICollection<Country> Countries { get; set; }

        [JsonPropertyName("genres")]
        public ICollection<Genre> Genres { get; set; }

        [JsonPropertyName("ratingKinopoisk")]
        public double? RatingKinopoisk { get; set; }

        [JsonPropertyName("ratingImbd")]
        public double? RatingImbd { get; set; }

        [JsonPropertyName("year")]
        public string Year { get; set; }

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public KinopoiskUserVoteResponse_itemsType Type { get; set; }

        [JsonPropertyName("posterUrl")]
        public string PosterUrl { get; set; }

        [JsonPropertyName("posterUrlPreview")]
        public string PosterUrlPreview { get; set; }

        [JsonPropertyName("userRating")]
        public int UserRating { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ApiKeyResponse_totalQuota
    {

        [JsonPropertyName("value")]
        public int Value { get; set; }

        [JsonPropertyName("used")]
        public int Used { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ApiKeyResponse_dailyQuota
    {

        [JsonPropertyName("value")]
        public int Value { get; set; }

        [JsonPropertyName("used")]
        public int Used { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class MediaPostsResponse_items
    {

        [JsonPropertyName("kinopoiskId")]
        public int KinopoiskId { get; set; }

        [JsonPropertyName("imageUrl")]
        public string ImageUrl { get; set; }

        [JsonPropertyName("title")]
        public string Title { get; set; }

        [JsonPropertyName("description")]
        public string Description { get; set; }

        [JsonPropertyName("url")]
        public string Url { get; set; }

        [JsonPropertyName("publishedAt")]
        public string PublishedAt { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STILL")]
        STILL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SHOOTING")]
        SHOOTING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"POSTER")]
        POSTER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FAN_ART")]
        FAN_ART = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PROMO")]
        PROMO = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CONCEPT")]
        CONCEPT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"WALLPAPER")]
        WALLPAPER = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"COVER")]
        COVER = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"SCREENSHOT")]
        SCREENSHOT = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum Order
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DATE_ASC")]
        DATE_ASC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DATE_DESC")]
        DATE_DESC = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"USER_POSITIVE_RATING_ASC")]
        USER_POSITIVE_RATING_ASC = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"USER_POSITIVE_RATING_DESC")]
        USER_POSITIVE_RATING_DESC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"USER_NEGATIVE_RATING_ASC")]
        USER_NEGATIVE_RATING_ASC = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"USER_NEGATIVE_RATING_DESC")]
        USER_NEGATIVE_RATING_DESC = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum Type2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TOP_POPULAR_ALL")]
        TOP_POPULAR_ALL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TOP_POPULAR_MOVIES")]
        TOP_POPULAR_MOVIES = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TOP_250_TV_SHOWS")]
        TOP_250_TV_SHOWS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TOP_250_MOVIES")]
        TOP_250_MOVIES = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"VAMPIRE_THEME")]
        VAMPIRE_THEME = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"COMICS_THEME")]
        COMICS_THEME = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CLOSES_RELEASES")]
        CLOSES_RELEASES = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FAMILY")]
        FAMILY = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"OSKAR_WINNERS_2021")]
        OSKAR_WINNERS_2021 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"LOVE_THEME")]
        LOVE_THEME = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ZOMBIE_THEME")]
        ZOMBIE_THEME = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CATASTROPHE_THEME")]
        CATASTROPHE_THEME = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"KIDS_ANIMATION_THEME")]
        KIDS_ANIMATION_THEME = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"POPULAR_SERIES")]
        POPULAR_SERIES = 13,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum Month
    {

        [System.Runtime.Serialization.EnumMember(Value = @"JANUARY")]
        JANUARY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FEBRUARY")]
        FEBRUARY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MARCH")]
        MARCH = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"APRIL")]
        APRIL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"MAY")]
        MAY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"JUNE")]
        JUNE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"JULY")]
        JULY = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"AUGUST")]
        AUGUST = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"SEPTEMBER")]
        SEPTEMBER = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"OCTOBER")]
        OCTOBER = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"NOVEMBER")]
        NOVEMBER = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"DECEMBER")]
        DECEMBER = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum Order2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RATING")]
        RATING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NUM_VOTE")]
        NUM_VOTE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"YEAR")]
        YEAR = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum Type3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FILM")]
        FILM = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TV_SHOW")]
        TV_SHOW = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TV_SERIES")]
        TV_SERIES = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MINI_SERIES")]
        MINI_SERIES = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum Month2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"JANUARY")]
        JANUARY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FEBRUARY")]
        FEBRUARY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MARCH")]
        MARCH = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"APRIL")]
        APRIL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"MAY")]
        MAY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"JUNE")]
        JUNE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"JULY")]
        JULY = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"AUGUST")]
        AUGUST = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"SEPTEMBER")]
        SEPTEMBER = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"OCTOBER")]
        OCTOBER = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"NOVEMBER")]
        NOVEMBER = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"DECEMBER")]
        DECEMBER = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum FilmProductionStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FILMING")]
        FILMING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PRE_PRODUCTION")]
        PRE_PRODUCTION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ANNOUNCED")]
        ANNOUNCED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"POST_PRODUCTION")]
        POST_PRODUCTION = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum FilmType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FILM")]
        FILM = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VIDEO")]
        VIDEO = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TV_SERIES")]
        TV_SERIES = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MINI_SERIES")]
        MINI_SERIES = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"TV_SHOW")]
        TV_SHOW = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum FactType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FACT")]
        FACT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BLOOPER")]
        BLOOPER = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum DistributionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LOCAL")]
        LOCAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COUNTRY_SPECIFIC")]
        COUNTRY_SPECIFIC = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PREMIERE")]
        PREMIERE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"WORLD_PREMIER")]
        WORLD_PREMIER = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum DistributionSubType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CINEMA")]
        CINEMA = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DVD")]
        DVD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DIGITAL")]
        DIGITAL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BLURAY")]
        BLURAY = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Country2 : Country
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum FilmSequelsAndPrequelsResponseRelationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SEQUEL")]
        SEQUEL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PREQUEL")]
        PREQUEL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REMAKE")]
        REMAKE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum StaffResponseProfessionKey
    {

        [System.Runtime.Serialization.EnumMember(Value = @"WRITER")]
        WRITER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OPERATOR")]
        OPERATOR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EDITOR")]
        EDITOR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPOSER")]
        COMPOSER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCER_USSR")]
        PRODUCER_USSR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSLATOR")]
        TRANSLATOR = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DIRECTOR")]
        DIRECTOR = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"DESIGN")]
        DESIGN = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCER")]
        PRODUCER = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTOR")]
        ACTOR = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"VOICE_DIRECTOR")]
        VOICE_DIRECTOR = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum PersonResponseSex
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MALE")]
        MALE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FEMALE")]
        FEMALE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum ApiKeyResponseAccountType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FREE")]
        FREE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EXTENDED")]
        EXTENDED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UNLIMITED")]
        UNLIMITED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum FilmSearchResponse_filmsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FILM")]
        FILM = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TV_SHOW")]
        TV_SHOW = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VIDEO")]
        VIDEO = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MINI_SERIES")]
        MINI_SERIES = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"TV_SERIES")]
        TV_SERIES = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum FilmSearchByFiltersResponse_itemsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FILM")]
        FILM = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TV_SHOW")]
        TV_SHOW = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VIDEO")]
        VIDEO = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MINI_SERIES")]
        MINI_SERIES = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"TV_SERIES")]
        TV_SERIES = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum RelatedFilmResponse_itemsRelationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SIMILAR")]
        SIMILAR = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum ReviewResponse_itemsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"POSITIVE")]
        POSITIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NEGATIVE")]
        NEGATIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NEUTRAL")]
        NEUTRAL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum FilmCollectionResponse_itemsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FILM")]
        FILM = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TV_SHOW")]
        TV_SHOW = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VIDEO")]
        VIDEO = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MINI_SERIES")]
        MINI_SERIES = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"TV_SERIES")]
        TV_SERIES = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum PersonResponse_spousesSex
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MALE")]
        MALE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FEMALE")]
        FEMALE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum PersonResponse_filmsProfessionKey
    {

        [System.Runtime.Serialization.EnumMember(Value = @"WRITER")]
        WRITER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OPERATOR")]
        OPERATOR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EDITOR")]
        EDITOR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPOSER")]
        COMPOSER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCER_USSR")]
        PRODUCER_USSR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"HIMSELF")]
        HIMSELF = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"HERSELF")]
        HERSELF = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"HRONO_TITR_MALE")]
        HRONO_TITR_MALE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"HRONO_TITR_FEMALE")]
        HRONO_TITR_FEMALE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSLATOR")]
        TRANSLATOR = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"DIRECTOR")]
        DIRECTOR = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"DESIGN")]
        DESIGN = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCER")]
        PRODUCER = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTOR")]
        ACTOR = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"VOICE_DIRECTOR")]
        VOICE_DIRECTOR = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum PersonByNameResponse_itemsSex
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MALE")]
        MALE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FEMALE")]
        FEMALE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum VideoResponse_itemsSite
    {

        [System.Runtime.Serialization.EnumMember(Value = @"YOUTUBE")]
        YOUTUBE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"KINOPOISK_WIDGET")]
        KINOPOISK_WIDGET = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"YANDEX_DISK")]
        YANDEX_DISK = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum KinopoiskUserVoteResponse_itemsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FILM")]
        FILM = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TV_SHOW")]
        TV_SHOW = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VIDEO")]
        VIDEO = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MINI_SERIES")]
        MINI_SERIES = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"TV_SERIES")]
        TV_SERIES = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 5,

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625